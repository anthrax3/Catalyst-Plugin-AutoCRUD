    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store

    // text added to FK combo list to hint for the full-text-search option
    var fk_combo_comment = ' (all matches)';

    // create reusable renderer
    Ext.util.Format.comboRenderer = function(combo) {
        return function(value,metadata,record,rowindex,colindex,store) {
            // choose what to render from the combobox store's data
            if (rowindex === 0) {
                var rec = combo.findRecord(combo.valueField, value);
                var retval = rec ? rec.get(combo.displayField) : value;
                return (retval.indexOf(fk_combo_comment) !== -1) ? value : retval;
            }
            return value;
        }
    };

    // used to hack an extra entry into the store results on filters
    var sfyRecord = Ext.data.Record.create([
        { name: 'dbid' }, { name: 'stringified' }
    ]);

    // create the combo instances
    [% FOREACH col IN cpac.tc.cols %]
      [% IF cpac.tm.f.$col.is_foreign_key OR cpac.tm.f.$col.extra('is_reverse') %]
        var fk_combo_[% col %] = new Ext.form.ComboBox ({
            valueField: 'dbid'
            ,displayField: 'stringified'
            ,hiddenName: 'combobox.[% col %]'
            ,hiddenId: 'fk_combo_[% col %]'
            ,loadingText: 'Searching...'
            ,forceSelection: true
            ,selectOnFocus: true
            ,typeAhead: false
            ,pageSize: 10
            ,triggerAction: 'all'
            ,lazyRender: true
            ,listClass: 'x-combo-list-small'
            ,lastQuery: ''
            ,store: new Ext.data.JsonStore ({
                url: '[% c.uri_for(
                            c.controller('AutoCRUD::AJAX').action_for('list_stringified'),
                            [cpac.g.site,cpac_db,cpac_table]
                     ) %]'
                ,root: 'rows'
                ,totalProperty: 'total'
                ,fields: [ 'dbid', 'stringified' ]
                ,listeners: {
                    beforeload: function(store, options) {
                        var start = options.params.start;
                        var limit = options.params.limit;
                        options.params.page = Math.floor(start / limit) + 1;
                        options.params.fkname = '[% col %]';
                        if (fk_combo_[% col %].getRawValue() && (options.params.page === 1)) {
                            // so that we can hack in an extra row
                            options.params.limit = 9;
                        }
                        return true;
                    }
                    ,load: function(store, records, options) {
                        var queryText = fk_combo_[% col %].getRawValue();
                        if (queryText.length && (options.params.page === 1)) {
                            // be sure not to accidentally add a 2nd copy of fk_combo_comment
                            if (queryText.indexOf(fk_combo_comment) !== -1) {
                                queryText = queryText.replace(fk_combo_comment,'');
                            }
                            // insert an extra row with full-text-search option
                            store.insert(0, new sfyRecord({
                                dbid: queryText
                                ,stringified: queryText + fk_combo_comment
                            }));
                        }
                    }
                }
            })
            ,listeners: {
                // delete the previous query in the beforequery event or set
                // combo.lastQuery = null (this will reload the store the next time it expands)
                beforequery: function(qe) {
                    delete qe.combo.lastQuery;
                }
                ,blur : function() {
                    if (this.allowBlank && this.getRawValue() === '') {
                        this.clearValue();
                    }
                }
            }
        });
      [% END %]
    [% END %]

    // we first process the main, ordinary cols (pk and others)
    // the do the one_to_many cols, and then add a column with a delete button

    var cm = new Ext.grid.ColumnModel([
      [% FOREACH col IN cpac.tc.cols %]
        [% ',' IF NOT loop.first %]{
          [% IF cpac.tc.headings.exists(col) AND cpac.tc.headings.defined(col) %]
            header: '[% cpac.tc.headings.$col %]'
          [% ELSE %]
            header: '[% cpac.tm.f.$col.display_name %]'
          [% END %]
            [% ',hidden: true' IF NOT cpac.tc.headings.exists(col) %]
          [% IF cpac.tm.f.$col.is_foreign_key OR cpac.tm.f.$col.extra('is_reverse') %]
            [% IF cpac.tm.f.$col.extra('rel_type') == 'has_many' OR cpac.tm.f.$col.extra('rel_type') == 'many_to_many' %]
            ,dataIndex: 'cpac-multi-column'
            ,align: 'center'
            ,sortable: false
            ,menuDisabled: true
            ,tooltip: 'Hover mouse over a cell<br />to show related data'
            ,renderer: function (value,metadata,record,rowindex,colindex,store) {
                if (rowindex === 0 || record.get('[% col %]').join('') === '') { return '' }
                else {
                    metadata.css += 'half-grey';
                    metadata.attr += 'ext:qtitle="[% cpac.tm.f.$col.extra('display_name') %]" ext:qtip="'
                        + record.get('[% col %]').join('<br />') + '"';
                    return '<img ext:qtitle="[% cpac.tm.f.$col.extra('display_name') %]" ext:qtip="'
                        + record.get('[% col %]').join('<br />')
                        + '" src="[% c.uri_for( c.controller('AutoCRUD::Static').action_for('static'), "magnifier.png" ) %]" />'
                        + ' Show';
                }
            }
            [% ELSE %]
            ,dataIndex: '[% col %]'
            ,editor: fk_combo_[% col %] //reference to combo instance
            ,renderer: Ext.util.Format.comboRenderer(fk_combo_[% col %]) // pass combo instance to reusable renderer
            [% END %]
          [% ELSE %]
            ,editor: new Ext.form.TextField({})
            ,renderer: function (value,metadata,record,rowindex,colindex,store) {
              [% IF cpac.tm.f.$col.extra('extjs_xtype') == 'checkbox' %]
                if (rowindex === 0) { return '' }
                if (value == '1') {
                  return '<img src="[% c.uri_for( c.controller('AutoCRUD::Static').action_for('static'), "bullet_green.png" ) %]" />';
                }
                else {
                  return '<img src="[% c.uri_for( c.controller('AutoCRUD::Static').action_for('static'), "bullet_red.png" ) %]" />';
                }
              [% ELSE %]
                return value;
              [% END %]
            }
          [% END %]
        }
      [% END %]
      [% IF cpac.tc.delete_allowed == 'yes' %]
        ,{
            header: 'Delete'
            ,width: 35
            ,dataIndex: 'cpac-delete-column'
            ,align: 'left'
            ,sortable: false
            ,menuDisabled: true
            ,renderer: function (value,metadata,record,rowindex,colindex,store) {
                if (rowindex === 0) { return '' }
                else {
                    metadata.attr += 'ext:qtitle="Delete" ext:qtip="'
                        + ' [% cpac.tm.extra('pks').first %](' + record.get('[% cpac.tm.extra('pks').first %]') + ')"';
                    return '<img ext:qtitle="Delete" ext:qtip="'
                        + ' [% cpac.tm.extra('pks').first %](' + record.get('[% cpac.tm.extra('pks').first %]') + ')"'
                        + ' src="[% c.uri_for( c.controller('AutoCRUD::Static').action_for('static'), "bin_closed.png" ) %]" />';
                }
            }
        }
      [% END %]
    ]);

    // by default columns are sortable
    cm.defaultSortable = true;
